"use strict";(self.webpackChunkpersonal_site=self.webpackChunkpersonal_site||[]).push([[794],{794:function(e,t,n){n.r(t),n.d(t,{default:function(){return h}});var i=n(791),a=n(523),r=n(620),s=n(152),o=n(184),c=function(e){var t=e.data,n=(0,i.useState)(!1),a=(0,s.Z)(n,2),r=a[0],c=a[1];return(0,o.jsx)("div",{className:"cell-container",children:(0,o.jsxs)("article",{className:"mini-post",children:[(0,o.jsx)("p",{children:(0,o.jsxs)("h3",{children:[" ",t.title]})}),(0,o.jsx)("p",{children:t.author.split(",").map((function(e,n){var i=e.trim(),a="Jinghao Wang"===i||"Jinghao Wang*"===i,r=i.includes("#");return(0,o.jsxs)("span",{children:[a?(0,o.jsx)("b",{children:i}):r?(0,o.jsxs)(o.Fragment,{children:[i.replace("#",""),(0,o.jsx)("sup",{children:"\u2709"})]}):i,t.author.split(",").length===n+1?"":",\xa0\xa0"]},n)}))}),(0,o.jsx)("p",{className:"conference",children:t.conference}),(0,o.jsx)("p",{children:Object.entries(t.link).map((function(e,n){var a=(0,s.Z)(e,2),r=a[0],c=a[1];return(0,o.jsxs)(i.Fragment,{children:[(0,o.jsx)("a",{href:c,children:"[".concat(r,"]")}),n!==Object.keys(t).length-1&&"\xa0\xa0"]},r)}))}),(0,o.jsx)("p",{className:"conference",children:t.time}),(0,o.jsx)("a",{className:"image",children:(0,o.jsx)("img",{src:"".concat("").concat(t.image),alt:t.title})}),r?(0,o.jsx)("p",{children:t.abstract}):(0,o.jsx)("p",{}),(0,o.jsx)("button",{type:"button",className:"button",onClick:function(){return c(!r)},children:r?"Hide":"Show Abstract"})]})})},l=[{title:"Pair then Relation: Pair-Net for Panoptic Scene Graph Generation",author:"Jinghao Wang*, Zhengyu Wen*, Xiangtai Li, Jingkang Yang, Zujing Guo, Ziwei Liu#",image:"/images/projects/pairnet.png",conference:"PAMI, 2023, under review",time:"2023-07",link:{paper:"https://arxiv.org/abs/2307.08699",code:"https://github.com/king159/Pair-Net"},abstract:"Panoptic Scene Graph (PSG) is a challenging task in Scene Graph Generation (SGG) that aims to create a more comprehensive scene graph representation using panoptic segmentation instead of boxes. However, current PSG methods have limited performance, which can hinder downstream task development. To improve PSG methods, we conducted an in-depth analysis to identify the bottleneck of the current PSG models, finding that inter-object pair-wise recall is a crucial factor which was ignored by previous PSG methods. Based on this, we present a novel framework: Pair then Relation (Pair-Net), which uses a Pair Proposal Network (PPN) to learn and filter sparse pair-wise relationships between subjects and objects. We also observed the sparse nature of object pairs and used this insight to design a lightweight Matrix Learner within the PPN. Through extensive ablation and analysis, our approach significantly improves upon leveraging the strong segmenter baseline. Notably, our approach achieves new state-of-the-art results on the PSG benchmark, with over 10% absolute gains compared to PSGFormer.",ref:"pairnet"},{title:"MIMIC-IT: Multi-Modal In-Context Instruction Tuning",author:"Bo Li*,Yuanhan Zhang*,Liangyu Chen*, Jinghao Wang*, Fanyi Pu*, Jingkang Yang, Ziwei Liu#",image:"images/projects/mimicit.jpg",conference:"arXiv",time:"2023-06",link:{paper:"https://arxiv.org/abs/2306.05425",code:"https://github.com/Luodian/Otter"},abstract:"High-quality instructions and responses are essential for the zero-shot performance of large language models on interactive natural language tasks. For interactive vision-language tasks involving intricate visual scenes, a large quantity of diverse and creative instruction-response pairs should be imperative to tune vision-language models (VLMs). Nevertheless, the current availability of vision-language instruction-response pairs in terms of quantity, diversity, and creativity remains limited, posing challenges to the generalization of interactive VLMs. Here we present MultI-Modal In-Context Instruction Tuning (MIMIC-IT), a dataset comprising 2.8 million multimodal instruction-response pairs, with 2.2 million unique instructions derived from images and videos. Each pair is accompanied by multi-modal in-context information, forming conversational contexts aimed at empowering VLMs in perception, reasoning, and planning. The instruction-response collection process, dubbed as Syphus, is scaled using an automatic annotation pipeline that combines human expertise with GPT's capabilities. Using the MIMIC-IT dataset, we train a large VLM named Otter. Based on extensive evaluations conducted on vision-language benchmarks, it has been observed that Otter demonstrates remarkable proficiency in multi-modal perception, reasoning, and in-context learning. Human evaluation reveals it effectively aligns with the user's intentions. We release the MIMIC-IT dataset, instruction-response collection pipeline, benchmarks, and the Otter model.",ref:"mimicit"},{title:"Otter: A Multi-Modal Model with In-Context Instruction Tuning",author:"Bo Li*, Yuanhan Zhang*, Liangyu Chen*, Jinghao Wang*, Jingkang Yang, Ziwei Liu#",image:"images/projects/otter.jpg",conference:"arXiv",time:"2023-05",link:{paper:"https://arxiv.org/abs/2305.03726",code:"https://github.com/Luodian/Otter"},abstract:"Large Language Models (LLMs) have exhibited exceptional universal aptitude as few/zero-shot learners for numerous tasks, thanks to their pre-training on large-scale text data. GPT-3 is a prominent LLM that has showcased significant capabilities in this regard. Furthermore, variants of GPT-3, namely InstructGPT and ChatGPT, equipped with instruction tuning, have proven effective in interpreting natural language instructions to perform complex real-world tasks. In this paper, we propose to introduce instruction tuning into multi-modal models, motivated by the Flamingo model's upstream interleaved format pretraining dataset. We adopt a similar approach to construct our MultI-Modal In-Context Instruction Tuning (MIMIC-IT) dataset. We then introduce Otter, a multi-modal model based on OpenFlamingo (open-sourced version of DeepMind's Flamingo), trained on MIMIC-IT and showcasing improved instruction-following ability and in-context learning. We also optimize OpenFlamingo's implementation for researchers, democratizing the required training resources from 1$\times$ A100 GPU to 4$\times$ RTX-3090 GPUs, and integrate both OpenFlamingo and Otter into Hugging Face Transformers for more researchers to incorporate the models into their customized training and inference pipelines.",ref:"otter"},{title:"TransPatch: A Transformer-based Generator for Accelerating Transferable Patch Generation in Adversarial Attacks Against Object Detection Models",author:"Jinghao Wang, Chenling Cui, Xuejun Wen#, Jie Shi",image:"/images/projects/attack.jpg",conference:"European Conference on Computer Vision (ECCV) Workshop on Adversarial Robustness in the Real World (AROW), 2022",time:"2022-08",link:{paper:"https://link.springer.com/chapter/10.1007/978-3-031-25056-9_21"},abstract:"Patch-based adversarial attack shows the possibility to black-box physical attacks on state-of-the-art object detection models through hiding the occurrence of the objects, which causes a high risk in automated security system relying on such model. However, most prior works mainly focus on the attack performance but rarely pay attention to the training speed due to pixel updating and non-smoothing loss function in the training process. To overcome this limitation, we propose a simple but novel training pipeline called TransPatch, a transformer-based generator with new loss function, to accelerate the training process. To address the issue of unstable training problem of previous methods, we also compare and visualize the landscape of various loss functions. We conduct comprehensive experiments on two pedestrian and one stop sign datasets on three object detection models, i.e., YOLOv4, DETR and SSD to compare the training speed and patch performance in such adversarial attacks. From our experiments, our method outperforms previous methods within the first few epochs, and achieves absolute 20% ~ 30% improvements in attack success rate (ASR) using 10% of the training time. We hope our approach can motivate future research on using generator in physical adversarial attack generation on other tasks and models.",ref:"transpatch"}],h=function(){return(0,o.jsx)(r.Z,{title:"Publication",children:(0,o.jsxs)("article",{className:"post",id:"projects",children:[(0,o.jsx)("header",{children:(0,o.jsxs)("div",{className:"title",children:[(0,o.jsx)("h2",{"data-testid":"heading",children:(0,o.jsx)(a.rU,{to:"/publication",children:"Publication"})}),(0,o.jsx)("p",{children:"List of publications"})]})}),l.map((function(e){return(0,o.jsx)(c,{data:e},e.title)}))]})})}}}]);
//# sourceMappingURL=794.e25480d7.chunk.js.map